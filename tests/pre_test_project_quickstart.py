'''
test_project_quickstart.py
================

:Author: |author_names|
:Release: |version|
:Date: |today|


Purpose
=======

Run tests for project_quickstart

project_quickstart tests:

# Workflow:
  # run flake8 for each file (within vim and in root dir)
  # Use pytest only, test locally, then upload for CI

# For each dir generate and compare directory trees and compare ref and test files
# For each script (py and R) compare ref and test files
# Leave contents for manual diff if test fails


Usage and options
=================

Usage:
       pytest test_project_quickstart.py
       test_project_quickstart.py [-h | --help]

Options:
    -h --help           Show this screen

'''
##############
# Get all the modules needed
# System:
import os
import tempfile

# Import helper functions from this package:
import pytest_helpers
##############


##############
# Tests for project_quickstart

#####
# Set up options to run:
test_name = 'pq_test_ref'

# For each dir generate and compare directory trees and compare ref and test files
# For each script (py and R) compare ref and test files
cli_options = ['project_quickstart -n {}'.format(test_name),
               'project_quickstart --script-python={}'.format(test_name),
               'project_quickstart --script-R={}'.format(test_name),
               'project_quickstart --script-pipeline={}'.format(test_name),
               'project_quickstart --example',
               ]

dirs = ['{}'.format(test_name),
        'pipeline_{}'.format(test_name),
        'pq_example',  # this is fixed for --example
        ]

# Not tested:
# project_quickstart --help
# project_quickstart --version

# Not in use:
# project_quickstart --force
# project_quickstart --dry-run


# Get directory for reference files:
ref_dir = os.path.abspath(os.path.join(str(os.getcwd), 'ref_files'))
print(ref_dir)

# Create temporary directory for test outputs:
tempdir = tempfile.mkdtemp()
print(tempdir)
os.chdir(tempdir)
#####

#####
# Generate test sets
# Run each project_quickstart CLI option:
pytest_helpers.run_CLI_options(cli_options)


# For each dir generate and compare directory trees
# Generate trees:
def pq_trees(dirs):
    '''
    Generate directory trees for each dir specified
    '''
    for d in dirs:
        tree = pytest_helpers.create_dir_tree(d, 'tree')
        print(d)
        print(tree)

    return


# Collect files from directory trees:
ref_tree = pytest_helpers.collect_files(ref_dir, 'tree')
test_tree = pytest_helpers.collect_files(tempdir, 'tree')

# Compare ref and test trees:
pytest_helpers.compare_all_files(test_tree, ref_tree)


# For each dir generate and compare ref and test files
# Generate lists of files to compare for test and ref directories
def pq_dirs(dirs):
    '''
    Collect and compare files for each directory specified
    '''
    for d in dirs:
        d_ref = os.path.abspath(os.path.join(ref_dir, d))
        d_test = os.path.abspath(os.path.join(tempdir, d))
        ref_files = pytest_helpers.collect_files(d_ref, '')
        test_files = pytest_helpers.collect_files(d_test, '')
        print(ref_files)
        print(test_files)

        # Run compare_all_files() for tree directory files:
        pytest_helpers.compare_all_files(test_files, ref_files)

    return


# Compare py and R scripts generated by '--script-' options
def pq_script_options():
    '''
    Collect and compare files generated by --script-py and R options
    '''
    ref_files = pytest_helpers.collect_files(ref_dir, '.py')
    test_files = pytest_helpers.collect_files(tempdir, '.R')
    print(ref_files)
    print(test_files)

    # Run compare_all_files() for tree directory files:
    pytest_helpers.compare_all_files(test_files, ref_files)

    return

#####
##############
